#include<stdio.h>
#include<stdlib.h>
#include<Windows.h>
#include<malloc.h>

typedef struct LNode
{
    int data;     //数据域
    struct LNode* next; //指向下一个节点的指针
}LNode;

LNode* create_LinkList(void)
/*  头插入法创建单链表  */
{
    int data;
    LNode* head, * p;
    head = (LNode*)malloc(sizeof(LNode));
    head->next = NULL;       /*  创建链表的表头结点head  */
    while (1)
    {
        scanf("%d", &data);
        if (data == 32767)  break;
        p = (LNode*)malloc(sizeof(LNode));
        p->data = data;     /*  数据域赋值  */
        p->next = head->next;  head->next = p;
  
    }
    return (head);
}
void create_LinkList() {

}
ElemType Get_Elem(LNode* L)
{
    int j,i;   LNode* p;
    p = L->next;  j = 1;      /*  使p指向第一个结点  */
    while (p != NULL && j < i)
    {
        p = p->next;  j++;
    }        /*  移动指针p , j计数  */
    if (j != i)  return(-32768);
    else      return(p->data);
    /*   p为NULL 表示i太大;  j>i表示i为0  */
}

LNode* Locate_Node(LNode* L，int key)
/*  查找值为key的第一个结点  */
{
    LNode* p = L->next;
    while (p != NULL && p->data != key)    p = p->next;
    if (p->data == key)   return p;
    else
    {
        printf("所要查找的结点不存在!!\n");
        retutn(NULL);
    }
}
void  Insert_LNode(LNode* L,int i, ElemType e)
/*  第i个位置插入值为e的结点 */
{
    int  j = 0;  LNode* p，* q;
    p = L->next;
    while (p != NULL && j < i - 1)
    {
        p = p->next;  j++;
    }
    if (j != i - 1)     printf("i太大或i为0!!\n ");
    else
    {
        q = (LNode*)malloc(sizeof(LNode));
        q->data = e;   q->next = p-> next;
        p->next = q;
    }
}
void  Delete_LinkList(LNode* L， int i)
/*  删除第i个结点  */
{
    int  j = 1;  LNode* p，* q;
    p = L;  q = L->next;
    while (p->next != NULL && j < i)
    {
        p = q;  q = q->next;  j++;
    }
    if (j != i)     printf("i太大或i为0!!\n ");
    else
    {
        p->next = q->next;   free(q);
    }
}
void  Delete_LinkList(LNode* L，int key)
/*  删除值为key的第一个结点  */
{
    LNode* p = L, * q = L->next;
    while (q != NULL && q->data != key)
    {
        p = q;  q = q->next;
    }
    if (q->data == key)
    {
        p->next = q->next;  free(q);
    }
    else
        printf("所要删除的结点不存在!!\n");
}
int main()
{
    LNode* L;
    InitList(L);
    int a;

    while (1)
    {
        printf("请输入你要进行的操作:\n1.增加数据\n2.删除数据\n3.修改数据\n4.打印链表\n");
        scanf("%d", &a);
        switch (a)
        {
        case 1:ADD(L); break;
        case 2:dele(L); break;
        case 3:change(L); break;
        case 4:Prin(L); break;
        default:printf("输入不合法\n");
        }

    }
    system("pause");
    return 0;